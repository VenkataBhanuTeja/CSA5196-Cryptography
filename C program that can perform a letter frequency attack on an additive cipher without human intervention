#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void decrypt(char *ciphertext, int key) {
    int i;
    for (i = 0; i < strlen(ciphertext); i++) {
        if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            ciphertext[i] = ((ciphertext[i] - 'A' - key + 26) % 26) + 'A';
        } else if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            ciphertext[i] = ((ciphertext[i] - 'a' - key + 26) % 26) + 'a';
        }
    }
}

void calculateFrequency(char *text, int *frequency) {
    int i;
    for (i = 0; i < strlen(text); i++) {
        if (text[i] >= 'A' && text[i] <= 'Z') {
            frequency[text[i] - 'A']++;
        } else if (text[i] >= 'a' && text[i] <= 'z') {
            frequency[text[i] - 'a']++;
        }
    }
}

int findKey(int *frequency) {
    int i, maxIndex = 0;
    for (i = 1; i < 26; i++) {
        if (frequency[i] > frequency[maxIndex]) {
            maxIndex = i;
        }
    }
    return maxIndex;
}

int main() {
    char ciphertext[1000];
    int keyFrequency[26] = {0};
    int key, i;

    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  

    for (key = 0; key < 26; key++) {
        char decryptedText[1000];
        strcpy(decryptedText, ciphertext);
        decrypt(decryptedText, key);

        memset(keyFrequency, 0, sizeof(keyFrequency));

        calculateFrequency(decryptedText, keyFrequency);

        int maxKey = findKey(keyFrequency);

        if (key == 0) {
            printf("\nTop 10 possible plaintexts:\n");
        }
        printf("%d. Key: %d - %s\n", key + 1, maxKey, decryptedText);
    }

    return 0;
}
