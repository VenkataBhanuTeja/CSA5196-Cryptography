#include <stdio.h>
#include <stdint.h>

// Initial Permutation (IP) table
int IP[] = {58, 50, 42, 34, 26, 18, 10, 2,
            60, 52, 44, 36, 28, 20, 12, 4,
            62, 54, 46, 38, 30, 22, 14, 6,
            64, 56, 48, 40, 32, 24, 16, 8,
            57, 49, 41, 33, 25, 17, 9, 1,
            59, 51, 43, 35, 27, 19, 11, 3,
            61, 53, 45, 37, 29, 21, 13, 5,
            63, 55, 47, 39, 31, 23, 15, 7};

// Final Permutation (FP) table
int FP[] = {40, 8, 48, 16, 56, 24, 64, 32,
            39, 7, 47, 15, 55, 23, 63, 31,
            38, 6, 46, 14, 54, 22, 62, 30,
            37, 5, 45, 13, 53, 21, 61, 29,
            36, 4, 44, 12, 52, 20, 60, 28,
            35, 3, 43, 11, 51, 19, 59, 27,
            34, 2, 42, 10, 50, 18, 58, 26,
            33, 1, 41, 9, 49, 17, 57, 25};

// Expansion (E) table
int E[] = {32, 1, 2, 3, 4, 5, 4, 5,
           6, 7, 8, 9, 8, 9, 10, 11,
           12, 13, 12, 13, 14, 15, 16, 17,
           16, 17, 18, 19, 20, 21, 20, 21,
           22, 23, 24, 25, 24, 25, 26, 27,
           28, 29, 28, 29, 30, 31, 32, 1};

// S-Box tables (S1 to S8)
int S[8][4][16] = {
    {
        {14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7},
        {0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8},
        {4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0},
        {15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13},
    },
    // ... (similarly define S2 to S8)
};

// Permutation (P) table
int P[] = {16, 7, 20, 21, 29, 12, 28, 17,
           1, 15, 23, 26, 5, 18, 31, 10,
           2, 8, 24, 14, 32, 27, 3, 9,
           19, 13, 30, 6, 22, 11, 4, 25};

// Initial key permutation (PC-1) table
int PC1[] = {57, 49, 41, 33, 25, 17, 9, 1,
             58, 50, 42, 34, 26, 18, 10, 2,
             59, 51, 43, 35, 27, 19, 11, 3,
             60, 52, 44, 36, 63, 55, 47, 39,
             31, 23, 15, 7, 62, 54, 46, 38,
             30, 22, 14, 6, 61, 53, 45, 37,
             29, 21, 13, 5, 28, 20, 12, 4};

// Permuted choice 2 (PC-2) table
int PC2[] = {14, 17, 11, 24, 1, 5, 3, 28,
             15, 6, 21, 10, 23, 19, 12, 4,
             26, 8, 16, 7, 27, 20, 13, 2,
             41, 52, 31, 37, 47, 55, 30, 40,
             51, 45, 33, 48, 44, 49, 39, 56,
             34, 53, 46, 42, 50, 36, 29, 32};

// Key schedule for decryption
void generateKeySchedule(uint64_t originalKey, uint64_t* subKeys) {
    int i, j;
    uint64_t key = 0;
    uint28_t c, d;

    // Initial permutation of the key
    for (i = 0; i < 56; i++) {
        key |= ((originalKey >> (64 - PC1[i])) & 0x01) << (55 - i);
    }

    // Split the key into C and D
    c = (key >> 28) & 0x0FFFFFFF;
    d = key & 0x0FFFFFFF;

    // Generate 16 subkeys
    for (i = 15; i >= 0; i--) {
        // Perform the key schedule
        c = ((c << (28 - ((i + 1) % 2) * 4)) | (c >> ((i + 1) % 2) * 4)) & 0x0FFFFFFF;
        d = ((d << (28 - ((i + 1) % 2) * 4)) | (d >> ((i + 1) % 2) * 4)) & 0x0FFFFFFF;

        // Combine C and D
        key = (((uint64_t)c) << 28) | (uint64_t)d;

        // Permuted choice 2 (PC-2)
        subKeys[i] = 0;
        for (j = 0; j < 48; j++) {
            subKeys[i] |= ((key >> (56 - PC2[j])) & 0x01) << (47 - j);
        }
    }
}

// Function to perform DES decryption
void des_decrypt(uint64_t block, uint64_t* subKeys) {
    int i;
    uint64_t temp, l, r;
    
    // Initial permutation (IP)
    uint64_t ipBlock = 0;
    for (i = 0; i < 64; i++) {
        ipBlock |= ((block >> (64 - IP[i])) & 0x01) << (63 - i);
    }

    // Split the block into left and right halves
    l = (ipBlock >> 32) & 0xFFFFFFFF;
    r = ipBlock & 0xFFFFFFFF;

    // Perform 16 rounds of Feistel network
    for (i = 15; i >= 0; i--) {
        temp = r;
        r = l ^ f(r, subKeys[i]);
        l = temp;
    }

    // Final permutation (FP)
    uint64_t result = ((uint64_t)r << 32) | l;
    uint64_t finalBlock = 0;
    for (i = 0; i < 64; i++) {
        finalBlock |= ((result >> (64 - FP[i])) & 0x01) << (63 - i);
    }

    // Output the decrypted block
    printf("Decrypted Block: %016llX\n", finalBlock);
}

// Function to perform the Feistel function
uint32_t f(uint32_t r, uint64_t subKey) {
    int i;
    uint48_t expandedR = 0;

    // Expansion (E)
    for (i = 0; i < 48; i++) {
        expandedR |= ((r >> (32 - E[i])) & 0x01) << (47 - i);
    }

    // XOR with subkey
    expandedR ^= subKey;

    // S-Boxes
    uint32_t sBoxOutput = 0;
    for (i = 0; i < 8; i++) {
        int row = ((expandedR & 0x800000000000) >> 42) | ((expandedR & 0x400000000000) >> 42) | ((expandedR & 0x200000000000) >> 42) | ((expandedR & 0x100000000000) >> 42);
        int col = (expandedR >> 43) & 0xF;
        sBoxOutput |= (uint32_t)S[i][row][col] << (4 * (7 - i));
        expandedR <<= 6;
    }

    // Permutation (P)
    uint32_t permutedSBoxOutput = 0;
    for (i = 0; i < 32; i++) {
        permutedSBoxOutput |= ((sBoxOutput >> (32 - P[i])) & 0x01) << (31 - i);
    }

    return permutedSBoxOutput;
}

int main() {
    // Example key and block for decryption
    uint64_t originalKey = 0x133457799BBCDFF1;
    uint64_t encryptedBlock = 0x85E813540F0AB405;

    // Generate the key schedule for decryption
    uint64_t subKeys[16];
    generateKeySchedule(originalKey, subKeys);

    // Perform DES decryption
    des_decrypt(encryptedBlock, subKeys);

    return 0;
}
