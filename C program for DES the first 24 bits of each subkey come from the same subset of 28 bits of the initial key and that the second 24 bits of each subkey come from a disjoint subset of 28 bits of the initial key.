#include <stdio.h>
#include <stdint.h>

const int initial_permutation[] = {57, 49, 41, 33, 25, 17, 9, 1,
                                   58, 50, 42, 34, 26, 18, 10, 2,
                                   59, 51, 43, 35, 27, 19, 11, 3,
                                   60, 52, 44, 36, 63, 55, 47, 39,
                                   31, 23, 15, 7, 62, 54, 46, 38,
                                   30, 22, 14, 6, 61, 53, 45, 37,
                                   29, 21, 13, 5, 28, 20, 12, 4};

const int key_schedule_permutation[] = {14, 17, 11, 24, 1, 5, 3, 28,
                                        15, 6, 21, 10, 23, 19, 12, 4,
                                        26, 8, 16, 7, 27, 20, 13, 2,
                                        41, 52, 31, 37, 47, 55, 30, 40,
                                        51, 45, 33, 48, 44, 49, 39, 56,
                                        34, 53, 46, 42, 50, 36, 29, 32};

void permuteKey(const uint64_t key, uint64_t *permutedKey, const int *permutation, int size) {
    *permutedKey = 0;
    for (int i = 0; i < size; i++) {
        *permutedKey |= ((key >> (64 - permutation[i])) & 1) << (size - 1 - i);
    }
}

void generateSubkeys(const uint64_t initialKey, uint64_t *subkeys) {
    
    uint64_t permutedKey;
    permuteKey(initialKey, &permutedKey, initial_permutation, 64);

    uint32_t left = permutedKey >> 28;
    uint32_t right = permutedKey & 0x0FFFFFFF;

    for (int i = 0; i < 16; i++) {
        
        left = ((left << 1) | (left >> 27)) & 0x0FFFFFFF;
        right = ((right << 1) | (right >> 27)) & 0x0FFFFFFF;

        uint64_t combined = ((uint64_t)left << 28) | right;
        permuteKey(combined, &subkeys[i], key_schedule_permutation, 48);
    }
}

int main() {
   
    uint64_t initialKey = 0x133457799BBCDFF1;

    uint64_t subkeys[16];

    generateSubkeys(initialKey, subkeys);

    for (int i = 0; i < 16; i++) {
        printf("Subkey %2d: %012lX\n", i + 1, subkeys[i]);
    }

    return 0;
}
