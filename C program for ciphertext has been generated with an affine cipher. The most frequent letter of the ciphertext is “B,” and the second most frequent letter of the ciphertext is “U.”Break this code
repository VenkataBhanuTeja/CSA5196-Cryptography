#include <stdio.h>
#include <string.h>
#include <ctype.h>

char affineDecrypt(char ch, int a, int b) {
    if (isalpha(ch)) {
        char base = isupper(ch) ? 'A' : 'a';
        
        int a_inverse = 0;
        while ((a * a_inverse) % 26 != 1) {
            a_inverse++;
        }
        return (a_inverse * (ch - base - b + 26) % 26 + 26) % 26 + base;
    }
    return ch;
}

void affineCipherDecrypt(char *ciphertext, int a, int b) {
    for (int i = 0; ciphertext[i] != '\0'; ++i) {
        ciphertext[i] = affineDecrypt(ciphertext[i], a, b);
    }
}

int main() {
    char ciphertext[1000];
    
    printf("Enter the ciphertext: ");
    fgets(ciphertext, sizeof(ciphertext), stdin);

    int b = ('B' - 'E' + 26) % 26;

    int frequency[26] = {0};
    for (int i = 0; ciphertext[i] != '\0'; ++i) {
        if (isalpha(ciphertext[i])) {
            frequency[ciphertext[i] - (isupper(ciphertext[i]) ? 'A' : 'a')]++;
        }
    }

    int maxFreq = 0, secondMaxFreq = 0;
    int maxIndex = 0, secondMaxIndex = 0;
    for (int i = 0; i < 26; ++i) {
        if (frequency[i] > maxFreq) {
            secondMaxFreq = maxFreq;
            secondMaxIndex = maxIndex;
            maxFreq = frequency[i];
            maxIndex = i;
        } else if (frequency[i] > secondMaxFreq) {
            secondMaxFreq = frequency[i];
            secondMaxIndex = i;
        }
    }

    int a = (secondMaxIndex - ('U' - 'T' + 26) % 26 + 26) % 26;

    affineCipherDecrypt(ciphertext, a, b);

    printf("Decrypted message: %s\n", ciphertext);

    return 0;
}
