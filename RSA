#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Function to calculate the greatest common divisor (GCD)
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    } else {
        return gcd(b, a % b);
    }
}

// Function to calculate the modular inverse using the extended Euclidean algorithm
int mod_inverse(int a, int m) {
    int m0 = m, t, q;
    int x0 = 0, x1 = 1;

    if (m == 1) {
        return 0;
    }

    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m;
        a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }

    if (x1 < 0) {
        x1 += m0;
    }

    return x1;
}

// Function to generate public and private keys
void generate_keys(int p, int q, int *e, int *d, int *n) {
    int phi, key;

    *n = p * q;
    phi = (p - 1) * (q - 1);

    // Choose e such that 1 < e < phi and e is coprime with phi
    do {
        *e = rand() % (phi - 2) + 2;
    } while (gcd(*e, phi) != 1);

    // Calculate d, the modular multiplicative inverse of e (mod phi)
    *d = mod_inverse(*e, phi);
}

// Function to perform RSA encryption
int encrypt(int plaintext, int e, int n) {
    return (int)fmod(pow(plaintext, e), n);
}

// Function to perform RSA decryption
int decrypt(int ciphertext, int d, int n) {
    return (int)fmod(pow(ciphertext, d), n);
}

int main() {
    // Choose two large prime numbers (in practice, these would be much larger)
    int p = 61;
    int q = 53;

    int e, d, n;

    // Generate public and private keys
    generate_keys(p, q, &e, &d, &n);

    // Message to be encrypted
    int plaintext = 42;

    // Perform encryption
    int ciphertext = encrypt(plaintext, e, n);

    // Perform decryption
    int decrypted_text = decrypt(ciphertext, d, n);

    // Display the results
    printf("Original Message: %d\n", plaintext);
    printf("Encrypted Message: %d\n", ciphertext);
    printf("Decrypted Message: %d\n", decrypted_text);

    return 0;
}
